{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww15420\viewh12200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Aug 2, 2021\
\
Refer to:\
\pard\pardeftab720\partightenfactor0

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 @inproceedings\{zamani2019feedback,\
  title=\{Feedback motion planning of legged robots by composing orbital lyapunov functions using rapidly-exploring random trees\},\
  author=\{Zamani, Ali and Galloway, Joseph D and Bhounsule, Pranav A\},\
  booktitle=\{2019 International Conference on Robotics and Automation (ICRA)\},\
  pages=\{1410--1416\},\
  year=\{2019\},\
  organization=\{IEEE\}\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
Part A)\

\f2\b V Method A Trajectory optimization
\f0\b0 \
1. These files are not provided. Here a trajectory optimization is solved to get controls u for a given state x that achieves a given decrease in Lyapunov function. e.g., V(k+1) = 0.1 V(k).\
\
These files produce data_lyap1_09_xy_pq.mat where the xy indicates the speed x.y and pq indicates the height as p.q\
For example data_lyap1_09_20_13.mat means that this file found u for state x around the fixed point 2.0 (speed) and 1.3 (height).\
\
\

\f2\b Part B:
\f0\b0 \
Run main.m with options = 32 (defined in the first few lines). \
	This uses the mapping control u = F(x)  (x=state) for multiple ROAs and fits a single neural network. See Fig. 3 in the paper.\
	
\f2\b Input files: 
\f0\b0 data_lyap1_09_xx_xx.mat (multiple files)\
	
\f2\b Output:
\f0\b0  control_policy.mat\
\

\f2\b Part C:
\f0\b0 \
Run RRT_ellipse_dynamic.m \
	This uses the control_policy.mat which has u = F(x,ellipse parameters) and RRT to do motion planning. See Algorithm 1 and Figure 4 in the paper.\
\
	
\f2\b Input files
\f0\b0 : control_policy.mat\
	
\f2\b Output:
\f0\b0  A movie showing transitions}